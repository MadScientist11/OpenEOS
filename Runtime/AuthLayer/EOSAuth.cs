using Epic.OnlineServices.Auth;
using Epic.OnlineServices.Platform;
using Epic.OnlineServices;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

namespace RobProductions.OpenEOS
{
	public static class EOSAuth
	{

		//CORE ACCOUNT FUNCTIONS

		/// <summary>
		/// Login process for normal Epic accounts that returns a result to your provided callback.
		/// You may need to run this multiple times if you want to provide alternative means
		/// for the user to log in, i.e. Persistent auth (if fail) -> Exchange token (if fail)
		/// -> AccountPortal as a last resort.
		/// <br></br><br></br>
		/// Note that you can't actually do anything too useful with the returned EpicAccountId.
		/// To do things like unlocking achievements for the user, once Auth is successful you
		/// need to then use returned EpicAccountId & convert to token to input for the secondary login:
		/// Use EOSCore.LoginConnect (or start with it instead) to get a generic ProductUserId,
		/// and then you can utilize the ProductUserId in Epic's other SDK calls.
		/// </summary>
		/// <param name="platformSession">The platform session generated by EOSCore.Init</param>
		/// <param name="loginSet">Set of parameters that will determine credential type and info.
		/// This could either be a developer account, persistent auth, or account portal.
		/// </param>
		/// <param name="loginCompleteDelegate">
		/// Callback function that is run when EOS Auth async Login() is complete.
		/// Check for LoginCallbackInfo.Result to see if the login was successful.
		/// </param>
		/// <returns>True when the login was started successfully and false if otherwise.
		/// Note that AuthInterface.Login is an async operation that returns the result
		/// to your provided loginCompleteDelegate. Just because this function returned true
		/// it does NOT mean Login was actually successful, just that it successfully started.
		/// </returns>
		public static bool LoginAuth(PlatformInterface platformSession, EOSLoginSet loginSet, OnLoginCallback loginCompleteCallback)
		{
			var authInterface = platformSession.GetAuthInterface();
			if (authInterface == null)
			{
				EOSCore.LogEOS("Warning: Could not retrieve AuthInterface from provided platformSession");
				return false;
			}

			var loginOptions = new LoginOptions()
			{
				Credentials = new Credentials()
				{
					Type = loginSet.credentialType,
					Id = loginSet.credentialID,
					Token = loginSet.credentialToken,
					ExternalType = loginSet.credentialExternalType,
				},
				ScopeFlags = loginSet.authScopeFlags,

			};

			//Start the async Login function
			//EOS requires platform.Tick() to be called repeatedly for this to complete.
			//When it completes, loginCompleteCallback must determine what to do with the
			//result, which could either be Result.Success, or something else.
			//Note that some Results could mean temporary error and may not be
			//"final", though I'm not sure what that means.
			//You may have to use Epic.OnlineServices.Common.IsOperationComplete()
			//to determine whether to try another login attempt or continue waiting.
			authInterface.Login(ref loginOptions, null, loginCompleteCallback);
			return true;
		}

		/// <summary>
		/// Secondary Login step that is required to get the ProductUserId that the SDK prefers.
		/// I think this logs the user into a more generic account than the Auth version of Login,
		/// so that external credentials can also qualify for achievements and such.
		/// You can use the EpicAccountId to generate a token that can be used for this Connect Login,
		/// by using GetAuthInterface().CopyIdToken() and inputting the JsonWebToken contained within
		/// to the "credentials" param used here.
		/// <br></br><br></br>
		/// Note: See the shortcut login actions provided in EOSAuth to more easily
		/// translate your EpicAccountId into a usable ProductUserId. These additional
		/// features call LoginConnect internally and save some code on your end
		/// if you're using the preferred approach of LoginAuth -> LoginConnect to get ProductUserId.
		/// <br></br><br></br>
		/// Alternatively, you could run this generic login step with the user's Google, Steam, or other
		/// account and use this Connect call to link to their EOS Profile.
		/// </summary>
		/// <param name="platformSession">Generated platform given by EOSCore.Init</param>
		/// <param name="credentials">Connect Credentials for the desired user.</param>
		/// <param name="additionalLoginInfo">Additional account info that is only used on
		/// certain non-Epic login types for Connect.</param>
		/// <param name="loginCompleteCallback">Callback that will be run when Connect Login is complete.
		/// Note that you must read the "result" to see if it was successful.
		/// If you get an error such as FailureInvalidUser, you may need to additionally
		/// run ConnectInterface.CreateUser() with the continuanceToken provided by the callback
		/// in order to initialize the link between the desired credential and EOS.
		/// </param>
		/// <returns>True if Connect login successfully started, false if otherwise.</returns>
		public static bool LoginConnect(PlatformInterface platformSession, Epic.OnlineServices.Connect.Credentials credentials,
			Epic.OnlineServices.Connect.UserLoginInfo? additionalLoginInfo, Epic.OnlineServices.Connect.OnLoginCallback loginCompleteCallback)
		{
			var connectInterface = platformSession.GetConnectInterface();
			if (connectInterface == null)
			{
				EOSCore.LogEOS("Warning: Could not retrieve ConnectInterface from provided platformSession");
				return false;
			}

			Epic.OnlineServices.Connect.LoginOptions options = new Epic.OnlineServices.Connect.LoginOptions()
			{
				Credentials = credentials,
				UserLoginInfo = additionalLoginInfo,
			};
			//Start the async Connect Login function
			//EOS requires platform.Tick() to be called for this to complete.
			//When it completes, loginCompleteCallback must determine what to do with the result.
			connectInterface.Login(ref options, null, loginCompleteCallback);
			return true;
		}

		//SHORTCUT LOGIN ACTIONS

		public static bool LoginEpicAccountToProductUser(PlatformInterface platformSession, EpicAccountId epicAccount,
			Epic.OnlineServices.Connect.OnLoginCallback loginCompleteCallback)
		{
			var authInterface = platformSession.GetAuthInterface();
			var connectInterface = platformSession.GetConnectInterface();
			if(authInterface == null)
			{
				EOSCore.LogEOS("Warning: Could not retrieve AuthInterface from provided platformSession");
				return false;
			}
			if(connectInterface == null)
			{
				EOSCore.LogEOS("Warning: Could not retrieve ConnectInterface from provided platformSession");
				return false;
			}

			//First acquire the IDToken from the provided Epic Account
			//This is done by running CopyIdToken
			Epic.OnlineServices.Auth.CopyIdTokenOptions copyOpt = new Epic.OnlineServices.Auth.CopyIdTokenOptions()
			{
				AccountId = epicAccount,
			};

			Epic.OnlineServices.Auth.IdToken? idToken;
			var copyResult = authInterface.CopyIdToken(ref copyOpt, out idToken);
			if(copyResult != Result.Success)
			{
				EOSCore.LogEOS("Warning: CopyIdToken on the provided epicAccount encountered an error - " + copyResult.ToString());
				return false;
			}
			if(idToken == null)
			{
				EOSCore.LogEOS("Warning: CopyIdToken idToken output was null");
				return false;
			}

			//Use the Auth IDToken to sign in through Connect.Login
			Epic.OnlineServices.Connect.Credentials credentials = new Epic.OnlineServices.Connect.Credentials()
			{
				Token = idToken.Value.JsonWebToken,
				Type = ExternalCredentialType.EpicIdToken,
			};

			return LoginConnect(platformSession, credentials, null, loginCompleteCallback);
		}
	}
}