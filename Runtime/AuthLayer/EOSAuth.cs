using Epic.OnlineServices.Auth;
using Epic.OnlineServices.Platform;
using Epic.OnlineServices;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

namespace RobProductions.OpenEOS
{
	public static class EOSAuth
	{

		//CORE ACCOUNT FUNCTIONS

		//See here to understand the difference between Auth & Connect:
		//https://dev.epicgames.com/en-US/news/player-authentication-with-epic-account-services-eas
		
		/// <summary>
		/// Login process for normal Epic accounts that return a result to your provided callback.
		/// You may need to run this multiple times if you want to provide alternative means
		/// for the user to log in, i.e. Persistent auth (if fail) -> Exchange token (if fail)
		/// -> AccountPortal as a last resort.
		/// <br></br>
		/// Note: EpicAccountId isn't always useful in the SDK. For things like unlocking achievements,
		/// you will need to use LoginConnect after LoginAuth to get the generic ProductUserId.
		/// </summary>
		/// <param name="platformSession">The platform session generated by EOSCore.Init</param>
		/// <param name="loginSet">Set of parameters that will determine credential type and info.
		/// This could either be a developer account, persistent auth, or account portal.
		/// </param>
		/// <param name="loginCompleteCallback">
		/// Callback function that is run when EOS Auth async Login() is complete.
		/// Check for LoginCallbackInfo.Result to see if the login was successful.
		/// </param>
		/// <returns>True when the login was started successfully and false if otherwise.
		/// Note that AuthInterface.Login is an async operation that returns the result
		/// to your provided loginCompleteDelegate. Just because this function returned true
		/// it does NOT mean Login was actually successful, just that it successfully started.
		/// </returns>
		public static bool LoginAuth(PlatformInterface platformSession, EOSLoginAuthSet authSet, OnLoginCallback loginCompleteCallback)
		{
			var authInterface = platformSession.GetAuthInterface();
			if (authInterface == null)
			{
				EOSCore.LogEOS("Warning: Could not retrieve AuthInterface from provided platformSession");
				return false;
			}

			var loginOptions = new LoginOptions()
			{
				Credentials = new Credentials()
				{
					Type = authSet.credentialType,
					Id = authSet.credentialID,
					Token = authSet.credentialToken,
					ExternalType = authSet.credentialExternalType,
				},
				ScopeFlags = authSet.authScopeFlags,

			};

			//Start the async Login function
			//EOS requires platform.Tick() to be called repeatedly for this to complete.
			//When it completes, loginCompleteCallback must determine what to do with the
			//result, which could either be Result.Success, or something else.
			//Note that some Results could mean temporary error and may not be
			//"final", though I'm not sure what that means.
			//You may have to use Epic.OnlineServices.Common.IsOperationComplete()
			//to determine whether to try another login attempt or continue waiting.
			authInterface.Login(ref loginOptions, null, loginCompleteCallback);
			return true;
		}

		/// <summary>
		/// Secondary Login step that is required to get the ProductUserId that the SDK prefers.
		/// I think this logs the user into a more generic account than the Auth version of Login,
		/// so that external credentials can also qualify for achievements and such.
		/// You can use the EpicAccountId to generate a token that can be used for this Connect Login,
		/// by using GetAuthInterface().CopyIdToken() and inputting the JsonWebToken contained within
		/// to the "credentials" param in EOSLoginConnectSet used here.
		/// <br></br><br></br>
		/// Note: See the shortcut login actions provided in EOSAuth to more easily
		/// translate your EpicAccountId into a usable ProductUserId. These additional
		/// features call LoginConnect internally and save some code on your end
		/// if you're using the preferred approach of LoginAuth -> LoginConnect to get ProductUserId.
		/// <br></br><br></br>
		/// Alternatively, you could run this generic login step with the user's Google, Steam, or other
		/// account and use this Connect call to link to their EOS Profile.
		/// </summary>
		/// <param name="platformSession">Generated platform given by EOSCore.Init</param>
		/// <param name="loginCompleteCallback">Callback that will be run when Connect Login is complete.
		/// Note that you must read the "result" to see if it was successful.
		/// If you get an error such as FailureInvalidUser, you may need to additionally
		/// run ConnectInterface.CreateUser() with the continuanceToken provided by the callback
		/// in order to initialize the link between the desired credential and EOS.
		/// </param>
		/// <returns>True if Connect login successfully started, false if otherwise.</returns>
		public static bool LoginConnect(PlatformInterface platformSession, EOSLoginConnectSet connectSet,
			Epic.OnlineServices.Connect.OnLoginCallback loginCompleteCallback)
		{
			var connectInterface = platformSession.GetConnectInterface();
			if (connectInterface == null)
			{
				EOSCore.LogEOS("Warning: Could not retrieve ConnectInterface from provided platformSession");
				return false;
			}

			var credentials = new Epic.OnlineServices.Connect.Credentials()
			{
				Token = connectSet.credentialsToken,
				Type = connectSet.credentialsType,
			};

			Epic.OnlineServices.Connect.LoginOptions options = new Epic.OnlineServices.Connect.LoginOptions()
			{
				Credentials = credentials,
				UserLoginInfo = connectSet.additionalLoginInfo,
			};
			//Start the async Connect Login function
			//EOS requires platform.Tick() to be called for this to complete.
			//When it completes, loginCompleteCallback must determine what to do with the result.
			connectInterface.Login(ref options, null, loginCompleteCallback);
			return true;
		}

		//SHORTCUT LOGIN ACTIONS

		/// <summary>
		/// When you don't care to use 2 different callbacks for translating
		/// EpicAccountId to ProductUserId, make one of these callbacks
		/// which will receive the combined results from either Login
		/// or Create user in the LoginEpicAccountToProductUserWithCreate().
		/// </summary>
		/// <param name="result">Result code returned by either Login or Create User callback</param>
		/// <param name="returnedId">Created or Logged in ProductUserId</param>
		/// <param name="didCreate">Whether the ProductUserId was created or just logged in</param>
		public delegate void CreateOrLoginPUIDCallback(Result result, ProductUserId returnedId, bool didCreate);

		/// <summary>
		/// Tired of using 2 seperate callbacks just to translate your EpicAccountId?
		/// This helper function performs the step of attempting ConnectLogin
		/// and creates the missing account if necessary, but consolidates the result
		/// into one CreateOrLoginPUIDCallback which is populated with the final ProductUserId
		/// and some info about the result/whether account creation occurred.
		/// </summary>
		/// <param name="platformSession"></param>
		/// <param name="epicAccount"></param>
		/// <param name="createOrLoginCallback"></param>
		/// <returns></returns>
		public static bool LoginEpicAccountToProductUserWithCreate(PlatformInterface platformSession, EpicAccountId epicAccount,
			CreateOrLoginPUIDCallback createOrLoginCallback)
		{
			return LoginEpicAccountToProductUserWithCreate(
				platformSession, 
				epicAccount,
				(ref Epic.OnlineServices.Connect.LoginCallbackInfo info) =>
				{
					createOrLoginCallback.Invoke(info.ResultCode, info.LocalUserId, false);
				},
				(ref Epic.OnlineServices.Connect.CreateUserCallbackInfo info) =>
				{
					createOrLoginCallback.Invoke(info.ResultCode, info.LocalUserId, true);
				}
			);
		}

		/// <summary>
		/// Like LoginEpicAccountToProductUser, but with the additional step
		/// of creating the account if it is detected to be missing.
		/// Will return a result to EITHER loginCompleteCallback, or createUserCallback,
		/// depending on whether it had to create an account or not.
		/// Note that loginCompleteCallback could come back with Result == success,
		/// if no creation was necessary. So be sure to check both callbacks.
		/// </summary>
		/// <param name="platformSession"></param>
		/// <param name="epicAccount"></param>
		/// <param name="loginCompleteCallback"></param>
		/// <param name="createUserCallback"></param>
		/// <returns>True if started successfully, false if otherwise</returns>
		public static bool LoginEpicAccountToProductUserWithCreate(PlatformInterface platformSession, EpicAccountId epicAccount,
			Epic.OnlineServices.Connect.OnLoginCallback loginCompleteCallback, 
			Epic.OnlineServices.Connect.OnCreateUserCallback createUserCallback)
		{
			var connectInterface = platformSession.GetConnectInterface();
			if (connectInterface == null)
			{
				EOSCore.LogEOS("Warning: Could not retrieve ConnectInterface from provided platformSession");
				return false;
			}

			return LoginEpicAccountToProductUser(
				platformSession,
				epicAccount,
				(ref Epic.OnlineServices.Connect.LoginCallbackInfo info) =>
				{
					if (info.ResultCode == Result.InvalidUser)
					{
						//Connect Login failed due to the user missing or not created yet,
						//So attempt to create it here and then pass on the result
						//to the provided callback
						if (info.ContinuanceToken == null)
						{
							//Continuance token was null,
							//Theoretically this shouldn't happen with "InvalidUser" but you never know.
							//This issue happened to me when I provided the token incorrectly
							//to ConnectLogin, but it gave a different Result code.
							EOSCore.LogEOS("Warning: ContinuanceToken was null attempting to create Connect User. "
								+ "This signifies an issue with the credentials and/or token.");
							loginCompleteCallback.Invoke(ref info);
						}
						else
						{
							//Continuance token is here, so create the new user
							//with that token and use the provided callback to complete the op
							var createOptions = new Epic.OnlineServices.Connect.CreateUserOptions()
							{
								ContinuanceToken = info.ContinuanceToken,
							};

							connectInterface.CreateUser(ref createOptions, null, createUserCallback);
						}
					}
					else
					{
						//Connect Login was already successful or failed for some other reason,
						//just pass the result
						loginCompleteCallback.Invoke(ref info);
					}
				}
			);
		}

		/// <summary>
		/// Have an EpicAccountId that you need translated to a ProductUserId?
		/// This is a helper function that calls EOSAuth.LoginConnect after performing
		/// some magic on your EpicAccount to link it to a generic Connect account,
		/// then uses your provided callback to return the result.
		/// Note that you may face "account not created" (InvalidUser) errors if
		/// its the first time connecting, in which case see the 
		/// LoginEpicAccountToProductUserWithCreate() to also create missing Connect accounts.
		/// </summary>
		/// <param name="platformSession"></param>
		/// <param name="epicAccount"></param>
		/// <param name="loginCompleteCallback"></param>
		/// <returns>True if the Connect Login call started as expected, false if otherwise</returns>
		public static bool LoginEpicAccountToProductUser(PlatformInterface platformSession, EpicAccountId epicAccount,
			Epic.OnlineServices.Connect.OnLoginCallback loginCompleteCallback)
		{
			var authInterface = platformSession.GetAuthInterface();
			var connectInterface = platformSession.GetConnectInterface();
			if(authInterface == null)
			{
				EOSCore.LogEOS("Warning: Could not retrieve AuthInterface from provided platformSession");
				return false;
			}
			if(connectInterface == null)
			{
				EOSCore.LogEOS("Warning: Could not retrieve ConnectInterface from provided platformSession");
				return false;
			}

			//First acquire the IDToken from the provided Epic Account
			//This is done by running CopyIdToken
			Epic.OnlineServices.Auth.CopyIdTokenOptions copyOpt = new Epic.OnlineServices.Auth.CopyIdTokenOptions()
			{
				AccountId = epicAccount,
			};

			Epic.OnlineServices.Auth.IdToken? idToken;
			var copyResult = authInterface.CopyIdToken(ref copyOpt, out idToken);
			if(copyResult != Result.Success)
			{
				EOSCore.LogEOS("Warning: CopyIdToken on the provided epicAccount encountered an error - " + copyResult.ToString());
				return false;
			}
			if(idToken == null)
			{
				EOSCore.LogEOS("Warning: CopyIdToken idToken output was null");
				return false;
			}

			//Use the Auth IDToken to sign in through Connect.Login
			var connectSet = new EOSLoginConnectSet()
			{
				credentialsToken = idToken.Value.JsonWebToken,
				credentialsType = ExternalCredentialType.EpicIdToken,
				additionalLoginInfo = null,
			};

			return LoginConnect(platformSession, connectSet, loginCompleteCallback);
		}

	}
}