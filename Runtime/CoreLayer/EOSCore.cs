using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Epic.OnlineServices;
using Epic.OnlineServices.Platform;

namespace RobProductions.OpenEOS
{
	public static class EOSCore
	{

		/// <summary>
		/// Quick Initialization setup for EOS SDK that automatically
		/// goes through the common init steps. Provide an EOSInitSet with populated values
		/// to determine the initialized EOS configuration (Product ID, Flags, Sandbox).
		/// </summary>
		/// <param name="initSet">Create after importing RobProductions.OpenEOS namespace and provide
		/// this object to customize the configuration used by EOSInit.</param>
		/// <returns>The generated PlatformInterface state if successful and null if
		/// unsuccessful for any reason.</returns>
		public static PlatformInterface Init(EOSInitSet initSet)
		{
			//TODO: Load Library Editor step

			//First initialize SDK
			var initOptions = new InitializeOptions()
			{
				ProductName = initSet.productName,
				ProductVersion = initSet.productVersion,
			};

			Result result = PlatformInterface.Initialize(ref initOptions);

			if(result != Result.Success && result != Result.AlreadyConfigured)
			{
				//SDK Initialization failure
				return null;
			}

			//Generate Platform
			var clientCredentials = new ClientCredentials();
			clientCredentials.ClientId = initSet.clientID;
			clientCredentials.ClientSecret = initSet.clientSecret;

			var platformOptions = new Options()
			{
				ClientCredentials = clientCredentials,
				ProductId = initSet.productID,
				SandboxId = initSet.sandboxID,
				DeploymentId = initSet.deploymentID,
				Flags = initSet.platformFlags,
				//CacheDirectory = 
				//EncryptionKey = "",
				//IsServer = false,
				//OverrideCountryCode = false,
				//OverrideLocaleCode = false,
				//Reserved = false,
				//TickBudgetInMilliseconds = 0            
			};

			var retInterface = PlatformInterface.Create(ref platformOptions);

			return retInterface;
		}

		//TODO: Core Login

		/// <summary>
		/// Shutdown the EOS SDK cleanly. Provide the session that was given
		/// on EOSInit (PlatformInterface) to close it.
		/// Use completeShutdown in non-editor builds only so that
		/// SDK can shutdown completely. Otherwise, you want the SDK
		/// to remain partially initialized or else EOS will throw errors
		/// until the Unity Editor itself has closed.
		/// This can be achieved through #if UNITY_EDITOR checks in your EOS manager.
		/// Returns true when successful and false if otherwise.
		/// </summary>
		/// <param name="platformSession">PlatformInterface that was generated by EOS
		/// when the SDK was initialized.</param>
		/// <param name="completeShutdown">Set to true when you want the SDK to unintialize
		/// completely (non-editor builds) instead of just releasing memory.
		/// This can be achieved through #if UNITY_EDITOR checks in your EOS manager.
		/// </param>
		/// <returns>True when shutdown was successful, false if otherwise.</returns>
		public static bool Shutdown(PlatformInterface platformSession, bool completeShutdown = false)
		{
			if(platformSession != null)
			{
				//Release the memory from this session
				platformSession.Release();
			}

			//Check if SDK should be uninitialized
			if(completeShutdown)
			{
				//Complete shutdown (Non-editor build)
				var result = PlatformInterface.Shutdown();
				if(result != Result.Success)
				{
					return false;
				}
			}

			return true;
		}
	}
}

